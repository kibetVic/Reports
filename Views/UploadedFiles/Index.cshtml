@model IEnumerable<Reports.Models.UploadedFile>

@{
    ViewData["Title"] = "Uploaded Files";
}

<style>
    .table tr td {
        font-size: 13px;
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    }

    .search-bar {
        background: #f8f9fa;
        padding: 10px 15px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
    }
    .table td,
    .table th {
        padding: 4px 8px !important; /* reduce vertical & horizontal padding */
        font-size: 12px;
        line-height: 1.2;
    }

    .table tbody tr {
        height: auto !important; /* let rows shrink naturally */
    }
</style>

<div class="container-fluid mt-4">
    <div class="card shadow-sm border-0 rounded-3">
        <div class="card-header bg-light border-bottom">
            <div class="card-header bg-light border-bottom mb-3">
                <h2 class="mb-4 fw-semibold text-primary">
                    <i class="bi bi-collection"></i> 🗂️ Uploaded Batches
                </h2>
                
                <!-- Search & Upload bar -->
                <div class="search-bar d-flex align-items-center gap-2 flex-wrap mb-3">
                    <!-- Search on the left -->
                    <div class="d-flex flex-grow-1 gap-2">
                        <input type="text" id="searchBox" class="form-control form-control-sm" placeholder="🔍 Search batches...">
                        <select id="modeFilter" class="form-select form-select-sm w-auto">
                            <option value="">All</option>
                            <option value="1">Single</option>
                            <option value="2">Multiple</option>
                        </select>
                        <button id="clearSearch" class="btn btn-sm btn-outline-secondary">
                            <i class="bi bi-x-circle"></i> Clear
                        </button>
                    </div>
                
                    <!-- Right side -->
                    <div class="ms-auto d-flex align-items-center gap-3">
                        <span class="small text-muted">
                            Showing <span id="visibleCount">0</span> batches
                        </span>
                        <a asp-action="Upload" class="btn btn-sm btn-primary shadow-sm">
                            <i class="bi bi-upload"></i> Upload New Files
                        </a>
                    </div>
                </div>
             </div>
        </div>

       @if (!Model.Any())
       {
           <div class="alert alert-info shadow-sm">No files uploaded yet.</div>
       }
       else
       {
           var grouped = Model
           .GroupBy(f => f.UploadBatchId)
           .OrderByDescending(g => g.Max(f => f.UploadedOn));
       
           <div class="table-responsive shadow-sm rounded">
               <table class="table table-striped table-hover align-middle mb-0">
                   <thead class="table-primary">
                       <tr class="text-secondary">
                           <th> </th>
                           <th>Voucher Name</th>
                           <th>Batch ID</th>
                           <th>Files Count</th>
                           <th>Uploaded On</th>
                           <th>Actions</th>
                       </tr>
                   </thead>
                   <tbody id="vouchersTableBody">
                       @{
                           var counter = 1;
                       }
                       @foreach (var group in grouped)
                       {
                           // get the latest file in this batch
                           var firstFile = group.OrderByDescending(f => f.UploadedOn).First();
                           <tr>
                               <td>
                                   <a asp-controller="UploadedFiles" asp-action="Edit" asp-route-batchId="@group.Key"
                                      class="text-decoration-underline text-primary">
                                       Select
                                   </a>
                               </td>
                               <td>@firstFile.PaymentVoucher?.VoucheName</td>
                               <td>@group.Key</td>
                               <td>@group.Count()</td>
                               <td>@group.Max(f => f.UploadedOn).ToString("g")</td>
                               <td>
                                   <div class="btn-group btn-group-sm" role="group">
                                       <a asp-action="ViewBatch" asp-route-batchId="@group.Key" class="btn btn-outline-info btn-sm">
                                           View Files
                                       </a>
                                       <form asp-action="BulkDelete" method="post" class="d-inline">
                                           <input type="hidden" name="selectedIds" value="@firstFile.Id" />
                                           <button type="submit" class="btn btn-sm btn-outline-danger">
                                               Delete
                                           </button>
                                       </form>
                                       <a asp-action="DownloadFullBatchPdf" asp-route-batchId="@group.Key"
                                          class="btn btn-sm btn-outline-success">
                                           PDF
                                       </a>
                                   </div>                                
                               </td>
                           </tr>
                           counter++;
                       }
                   </tbody>
               </table>
           </div>
       }
    </div>
</div>

@section Scripts {
    <script>
        (function () {
            const searchBox = document.getElementById('searchBox');
            const clearBtn = document.getElementById('clearSearch');
            const modeFilter = document.getElementById('modeFilter');
            const tbody = document.getElementById('vouchersTableBody');
            const visibleCount = document.getElementById('visibleCount');

            function normalize(s) { return (s || '').toString().toLowerCase(); }

            function refreshCount() {
                visibleCount.textContent = tbody.querySelectorAll('tr:not([hidden])').length;
            }

            function filterRows() {
                const q = normalize(searchBox.value);
                const mode = modeFilter.value;

                Array.from(tbody.rows).forEach(row => {
                    const text = normalize(row.innerText);
                    const rowMode = normalize(row.cells[3].innerText); // Files Count column

                    const matchesQuery = q === '' || text.indexOf(q) !== -1;
                    const matchesMode = mode === '' || rowMode === mode.toLowerCase();

                    row.hidden = !(matchesQuery && matchesMode);
                });

                refreshCount();
            }

            searchBox.addEventListener('input', filterRows);
            modeFilter.addEventListener('change', filterRows);
            clearBtn.addEventListener('click', function () {
                searchBox.value = '';
                modeFilter.value = '';
                filterRows();
            });

            // initialize
            filterRows();
        })();
    </script>
}
